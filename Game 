{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 1 (6 marks)\n",
    "In order to begin playing this game, we require a function that can update the game state after a move has been made.  Write a function ``add_coin(board, coin, column)``.  This function should take the following parameters:\n",
    "- ``board``: A list of lists representing the current state of the board\n",
    "- ``coin``: The character representing the current player's coin, i.e. 'R' or 'Y'\n",
    "- ``column``: An integer representing the column in which the player is inserting their coin, with 0 representing the left-most column in the grid.  You may assume that a value greater than the maximum number of columns in the grid will never be entered.\n",
    "Your function should return a list of lists representing the new state of the board after the coin has been played.\n",
    "\n",
    "Here are some examples you can use to call your function\n",
    "```python\n",
    "add_coin([[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]], 'R', 2)\n",
    ">>> [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 'R', 0]]\n",
    "add_coin([[0,0,0,0,0],[0,0,0,0,0],['R',0,0,0,0],['Y','R',0,'R','Y']], 'Y', 1)\n",
    ">>> [[0, 0, 0, 0, 0],\n",
    " [0, 0, 0, 0, 0],\n",
    " ['R', 'Y', 0, 0, 0],\n",
    " ['Y', 'R', 0, 'R', 'Y']]\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "import copy\n",
    "def add_coin(board, coin, column):\n",
    "    \"\"\" \n",
    "    Udates the state of the game after a move has been made and returns a new board.\n",
    "    Aceppts as parameters a nested list representing the current state of the board, an string representing\n",
    "    the player's coin and an interger representing the column in which the player is droppoing the coin. \n",
    "    \n",
    "    \"\"\"\n",
    "    \n",
    "    pos = None # Position variable with a inicial value defined to avoid many conditionals.\n",
    "    \n",
    "    for index_value, value in enumerate(board):\n",
    "        \n",
    "        # loop with enumerate metothod to return the index and value of the coin.\n",
    "        if board[index_value][column] == 0:\n",
    "            # Verify if line and column are empty. \n",
    "            # If it is true add position to the variable.\n",
    "            pos = index_value\n",
    "            #check availability of the position. \n",
    "            \n",
    "    new_board = copy.deepcopy(board)  \n",
    "    \n",
    "    if pos is not None:\n",
    "        # If pos is not empty coin drops in the next line available.\n",
    "        new_board[pos][column] = coin\n",
    "        \n",
    "        \n",
    "\n",
    "    # Return new_board updated.\n",
    "    return new_board\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 2 (6 marks)\n",
    "To ascertain whether the game is finished, we need a function to determine whether a particular player has won.  Write a function ``is_winner(board, coin)``.  This function should take the following parameters:\n",
    "- ``board``: A list of lists representing the current state of the board\n",
    "- ``coin``: The character representing the current player's coin, i.e. 'R' or 'Y'\n",
    "Your function should return ``True`` if the player using the ``coin`` coins has won the game in the current board position and ``False`` otherwise.\n",
    "\n",
    "Here are some examples you can use to call your function:\n",
    "```python\n",
    "is_winner([[0,0,0,0,0],[0,0,0,0,0],['R',0,0,0,0],['Y','R',0,'R','Y']], 'Y')\n",
    ">>> False\n",
    "is_winner([['Y',0,0,0],['Y',0,0,0],['Y',0,'R','R'],['Y',0,'R','R']], 'R')\n",
    ">>> True\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_winner(board, coin):\n",
    "    \"\"\"\n",
    "    Determines if player is the winner verifying the if the position of the coins is a square and returns True \n",
    "    or False otherwise.\n",
    "    Accepts as arguments the current state of the board as a nested list and coin as a string.\n",
    "    \n",
    "    \"\"\"\n",
    "    \n",
    "    SQUARE_WIN = 4 # Validating a the number of coin with the sema value in a square for a win.\n",
    "    len_board_height = len(board) - 1 # Validating players movement given length of the board.\n",
    "    len_board_weight = len(board[0]) - 1 # Defining length of the rolls.\n",
    "\n",
    "    \n",
    "    # Iterating between rolls of the board where x = sublist and index_x = index of the sublist. \n",
    "    for index_x, x in enumerate(board):\n",
    "        \n",
    "        # Iterating on the position of the coin given a roll.\n",
    "        for index_y, y in enumerate(x):\n",
    "            \n",
    "            # To guarantee that the player's movement is valid for the given board.\n",
    "            if index_x < len_board_height and index_y < len_board_weight:                \n",
    "               \n",
    "                # Checking current state of the board in order to compare a square win. \n",
    "                verify_board = [\n",
    "                    board[index_x][index_y], board[index_x + 1][index_y], \n",
    "                    board[index_x][index_y + 1], board[index_x + 1][index_y + 1]\n",
    "                ]\n",
    "                \n",
    "                #checking winner board\n",
    "                if verify_board.count(coin) == SQUARE_WIN:\n",
    "                    return True\n",
    "    \n",
    "    return False\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 3 (9 marks)\n",
    "With these essential functions in place, we now wish to work towards building a competent AI to play our Connect Square game.  The concept of a <i>heuristic</i> is central to building an AI for most strategy games.  A heuristic is a function that maps a particular game state to a numeric value, indicating how desirable that state is to a particular player.  For example, a game state in which the player is about to win could be assigned a very high heuristic value, while a game state in which the player is about to lose could be assigned a very low value.\n",
    "\n",
    "There are numerous ways in which we can define a heuristic for any particular game, but we will adopt the following approach:\n",
    "- We will consider each overlapping 2 x 2 square within the grid.  For example, the points (0,0), (0, 1), (1, 0) and (1,1) will represent one square.  (1,0), (1, 1), (2, 0) and (2,1) will represent a second square and so on.\n",
    "- Consider the four points making up each square:\n",
    "\n",
    "\t-  If any one of those points contains an opponent's coin, it will be impossible to win the game by filling this square with our own coins and the square will therefore be assigned a value of 0.  \n",
    "\t- If one of the points contains our coin and the other three are empty the square will be assigned a value of 1. \n",
    "\t- If two of the points contain our coins and the other two points are empty then the square will be assigned a value of 10.\n",
    "\t- If three of the points contain our coins and the other one is empty then the square will be assigned a value of 100.\n",
    "\t- If all four of the points contain our coins then we have won the game and the square will be assigned a value of 1000.\n",
    "- The heuristic value for this game state is the sum of the value of each square in the grid.\n",
    "Note that there are some drawbacks to using this heuristic.  In particular, we don't consider how close our opponent is to completing a square so an AI that uses this heuristic will not try to prevent an opponent from completing his square.  You might like to consider how you could improve upon this heuristic, but for this task you should implement the heuristic as described.  Write a function ``heuristic(board, coin)`` that returns the heuristic value of the ``board`` for the player using the ``coin`` coins.\n",
    "\n",
    "Here are some examples you can use to call your function:\n",
    "\n",
    "```python\n",
    "heuristic([[0,0,0,0,0],[0,0,0,0,0],['R',0,0,0,0],['Y','R',0,'R','Y']], 'R')\n",
    ">>> 3\n",
    "heuristic([['Y',0,0,0],['Y',0,0,0],['Y',0,'R','R'],['Y',0,'R','R']], 'R')\n",
    ">>> 1021\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def heuristic(board, coin):\n",
    "    \"\"\"\n",
    "    Loops through the board and calculates the heuristic value of \n",
    "    each movement possible for the round and return this value.\n",
    "    \n",
    "    \"\"\"\n",
    "    \n",
    "    len_board_height = len(board) - 1 # Defining the hight of the columns.\n",
    "    len_board_weight = len(board[0]) - 1 # Defining length of the rolls.\n",
    "\n",
    "    reverse_coin = 'Y' if coin == 'R' else 'R'\n",
    "    \n",
    "    total_heuristic = 0\n",
    "    \n",
    "    # Reversing board to access the lists which contain player's movements.\n",
    "    for index_x, x in reversed(list(enumerate(board))):\n",
    "        for index_y, y in enumerate(x):\n",
    "            \n",
    "            # Checking current state of the board.\n",
    "            if index_x < len_board_height and index_y < len_board_weight:\n",
    "                verify_board = [\n",
    "                    [board[index_x][index_y], board[index_x + 1][index_y]], \n",
    "                    [board[index_x][index_y + 1], board[index_x + 1][index_y + 1]]\n",
    "                ]\n",
    "                \n",
    "                # Checking if there's an opponent's coin on the board.\n",
    "                if verify_board[0][0] == reverse_coin or verify_board[1][0] == reverse_coin or \\\n",
    "                        verify_board[0][1] == reverse_coin or verify_board[1][1] == reverse_coin:\n",
    "                    total_heuristic += 0\n",
    "\n",
    "                else:\n",
    "                    # Checking AI coin and adding.\n",
    "                    coins = 0\n",
    "                    for index_verify_x, verify_x in enumerate(verify_board):\n",
    "                        for index_verify_y, verify_y in enumerate(verify_x):\n",
    "                            if verify_board[index_verify_x][index_verify_y] == coin:\n",
    "                                if coins == 0:\n",
    "                                    coins = 1\n",
    "                                else:\n",
    "                                    coins *= 10\n",
    "                    total_heuristic += coins\n",
    "\n",
    "    return total_heuristic \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 4 (9 marks)\n",
    "We now wish to create an AI player capable of playing (and hopefully winning) our Connect Square game.  Write a function ``ai_move(board, coin)`` to play the Connect Square game.  Your function should generate a list of all possible moves from the current ``board``.  Your function should then generate the board states that arise from making each of these moves and select the move that results in the state with the highest heuristic value.  If two states have the same heuristic value, then select the one that results from the using the numerically lowest column (e.g. column 1 is preferred over column 2 if the heuristic values are identical).  Finally, your function should return the new board state after applying the best move.\n",
    "\n",
    "Here are some examples you can use to call your function:\n",
    "\n",
    "```python\n",
    "ai_move([[0,0,0,0,0],[0,0,0,0,0],['R',0,0,0,0],['Y','R',0,'R','Y']], 'Y')\n",
    ">>> [[0, 0, 0, 0, 0],\n",
    " [0, 0, 0, 0, 0],\n",
    " ['R', 0, 0, 'Y', 0],\n",
    " ['Y', 'R', 0, 'R', 'Y']]\n",
    "ai_move([[0,0,0,0,0],['Y',0,0,0,0],['R',0,0,0,'Y'],['Y','R',0,'R','Y']], 'Y')\n",
    ">>> [[0, 0, 0, 0, 0],\n",
    " ['Y', 0, 0, 0, 0],\n",
    " ['R', 0, 0, 'Y', 'Y'],\n",
    " ['Y', 'R', 0, 'R', 'Y']]\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ai_move(board, coin):\n",
    "    \"\"\"\n",
    "    Generetes a list of all possible moves from the current board and \n",
    "    returns the board with the highest heuristic value associated\n",
    "    \"\"\"\n",
    "    best_board = None # Set a inicial value for the best board in order to compare. \n",
    "    best_heuristic = -1 # Set a inicial value for the best heuristic in order to compere.\n",
    "    \n",
    "    # Loop through a deep copy of the original board.\n",
    "    for column in range(len(board[0])):\n",
    "        \n",
    "        new_board = add_coin(board, coin, column)\n",
    " \n",
    "        heur_new_board = heuristic(new_board, coin)\n",
    "        \n",
    "        if heur_new_board > best_heuristic:\n",
    "            best_board = new_board \n",
    "            best_heuristic = heur_new_board\n",
    "            \n",
    "    \n",
    "    return best_board\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Code to run your game\n",
    "The following functions will allow you to play a game against your AI.  This may be useful when debugging."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def moves_exist(board) :\n",
    "    \"\"\"\n",
    "    A move can still be made if any blank space exists on the top row\n",
    "    \"\"\"\n",
    "    if 0 in board[0] :\n",
    "        return True\n",
    "    return False\n",
    "\n",
    "def nice_print(board) :\n",
    "    \"\"\"\n",
    "    Formats the board for nicer display\n",
    "    \"\"\"\n",
    "    for line in board :\n",
    "        print(*line)\n",
    "    \n",
    "def play_game(rows, cols) :\n",
    "    \"\"\"\n",
    "    Plays a game with a human player against your AI\n",
    "    \"\"\"\n",
    "    # Instantiate an empty board\n",
    "    board = [([0]*cols) for i in range(rows)]\n",
    "\n",
    "    # Continue playing as long as a legal move can still be made\n",
    "    while(moves_exist(board)) :\n",
    "\n",
    "        # AI plays first with the red tokens\n",
    "        board = ai_move(board, 'R')\n",
    "        nice_print(board)\n",
    "\n",
    "        # Check if the AI Player has won the game\n",
    "        if (is_winner(board, 'R')) :\n",
    "            print('AI Wins!')\n",
    "            break\n",
    "\n",
    "        # Player moves next with the yellow tokens\n",
    "        player_move = input('Enter your move: ')\n",
    "        board = add_coin(board, 'Y', int(player_move))\n",
    "        if (is_winner(board, 'Y')) :\n",
    "            print('You win!')\n",
    "            break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 0 0 0 0 0 0\n",
      "0 0 0 0 0 0 0\n",
      "0 0 0 0 0 0 0\n",
      "0 0 0 0 0 0 0\n",
      "0 R 0 0 0 0 0\n"
     ]
    }
   ],
   "source": [
    "# Call play_game to play against your AI.  Useful for testing your code.\n",
    "play_game(5,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
